// Generated by Dagger (https://dagger.dev).
package com.omar_aly.sary.application;

import android.app.Activity;
import android.app.Service;
import android.view.View;
import androidx.fragment.app.Fragment;
import androidx.lifecycle.SavedStateHandle;
import androidx.lifecycle.ViewModel;
import com.omar_aly.data.BannersRepositoryImpl;
import com.omar_aly.data.CatalogRepositoryImpl;
import com.omar_aly.data.di.LocalModule;
import com.omar_aly.data.di.LocalModule_ProviderAppPrefsFactory;
import com.omar_aly.data.di.NetworkModule;
import com.omar_aly.data.di.NetworkModule_ProvideItemsApiFactory;
import com.omar_aly.data.di.NetworkModule_ProvideRetrofitFactory;
import com.omar_aly.data.di.RepositoryModule;
import com.omar_aly.data.di.RepositoryModule_ProviderBannersRepositoryFactory;
import com.omar_aly.data.di.RepositoryModule_ProviderCatalogRepositoryFactory;
import com.omar_aly.data.local.pref.AppPrefs;
import com.omar_aly.data.remote.api.ItemsApi;
import com.omar_aly.data.remote.builder.RetrofitBuilder;
import com.omar_aly.data.remote.interceptor.HeaderInterceptor;
import com.omar_aly.domain.repository.BannersRepository;
import com.omar_aly.domain.repository.CatalogRepository;
import com.omar_aly.domain.usecase.item.GetBannersUseCase;
import com.omar_aly.domain.usecase.item.GetCatalogUseCase;
import com.omar_aly.sary.ui.home.HomeFragment;
import com.omar_aly.sary.ui.home.HomeViewModel;
import com.omar_aly.sary.ui.home.HomeViewModel_HiltModules_KeyModule_ProvideFactory;
import dagger.hilt.android.ActivityRetainedLifecycle;
import dagger.hilt.android.internal.builders.ActivityComponentBuilder;
import dagger.hilt.android.internal.builders.ActivityRetainedComponentBuilder;
import dagger.hilt.android.internal.builders.FragmentComponentBuilder;
import dagger.hilt.android.internal.builders.ServiceComponentBuilder;
import dagger.hilt.android.internal.builders.ViewComponentBuilder;
import dagger.hilt.android.internal.builders.ViewModelComponentBuilder;
import dagger.hilt.android.internal.builders.ViewWithFragmentComponentBuilder;
import dagger.hilt.android.internal.lifecycle.DefaultViewModelFactories;
import dagger.hilt.android.internal.lifecycle.DefaultViewModelFactories_InternalFactoryFactory_Factory;
import dagger.hilt.android.internal.managers.ActivityRetainedComponentManager_Lifecycle_Factory;
import dagger.hilt.android.internal.modules.ApplicationContextModule;
import dagger.hilt.android.internal.modules.ApplicationContextModule_ProvideApplicationFactory;
import dagger.hilt.android.internal.modules.ApplicationContextModule_ProvideContextFactory;
import dagger.internal.DaggerGenerated;
import dagger.internal.DoubleCheck;
import dagger.internal.MemoizedSentinel;
import dagger.internal.Preconditions;
import java.util.Collections;
import java.util.Map;
import java.util.Set;
import javax.inject.Provider;
import retrofit2.Retrofit;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class DaggerMainApplication_HiltComponents_SingletonC extends MainApplication_HiltComponents.SingletonC {
  private final LocalModule localModule;

  private final ApplicationContextModule applicationContextModule;

  private final RepositoryModule repositoryModule;

  private final NetworkModule networkModule;

  private volatile Object appPrefs = new MemoizedSentinel();

  private volatile Object retrofitBuilder = new MemoizedSentinel();

  private volatile Object retrofit = new MemoizedSentinel();

  private volatile Object itemsApi = new MemoizedSentinel();

  private volatile Object bannersRepositoryImpl = new MemoizedSentinel();

  private volatile Object bannersRepository = new MemoizedSentinel();

  private volatile Object catalogRepositoryImpl = new MemoizedSentinel();

  private volatile Object catalogRepository = new MemoizedSentinel();

  private DaggerMainApplication_HiltComponents_SingletonC(
      ApplicationContextModule applicationContextModuleParam, LocalModule localModuleParam,
      NetworkModule networkModuleParam, RepositoryModule repositoryModuleParam) {
    this.localModule = localModuleParam;
    this.applicationContextModule = applicationContextModuleParam;
    this.repositoryModule = repositoryModuleParam;
    this.networkModule = networkModuleParam;
  }

  public static Builder builder() {
    return new Builder();
  }

  private AppPrefs appPrefs() {
    Object local = appPrefs;
    if (local instanceof MemoizedSentinel) {
      synchronized (local) {
        local = appPrefs;
        if (local instanceof MemoizedSentinel) {
          local = LocalModule_ProviderAppPrefsFactory.providerAppPrefs(localModule, ApplicationContextModule_ProvideContextFactory.provideContext(applicationContextModule));
          appPrefs = DoubleCheck.reentrantCheck(appPrefs, local);
        }
      }
    }
    return (AppPrefs) local;
  }

  private RetrofitBuilder retrofitBuilder() {
    Object local = retrofitBuilder;
    if (local instanceof MemoizedSentinel) {
      synchronized (local) {
        local = retrofitBuilder;
        if (local instanceof MemoizedSentinel) {
          local = new RetrofitBuilder(ApplicationContextModule_ProvideContextFactory.provideContext(applicationContextModule));
          retrofitBuilder = DoubleCheck.reentrantCheck(retrofitBuilder, local);
        }
      }
    }
    return (RetrofitBuilder) local;
  }

  private HeaderInterceptor headerInterceptor() {
    return new HeaderInterceptor(ApplicationContextModule_ProvideContextFactory.provideContext(applicationContextModule));
  }

  private Retrofit retrofit() {
    Object local = retrofit;
    if (local instanceof MemoizedSentinel) {
      synchronized (local) {
        local = retrofit;
        if (local instanceof MemoizedSentinel) {
          local = NetworkModule_ProvideRetrofitFactory.provideRetrofit(networkModule, retrofitBuilder(), headerInterceptor());
          retrofit = DoubleCheck.reentrantCheck(retrofit, local);
        }
      }
    }
    return (Retrofit) local;
  }

  private ItemsApi itemsApi() {
    Object local = itemsApi;
    if (local instanceof MemoizedSentinel) {
      synchronized (local) {
        local = itemsApi;
        if (local instanceof MemoizedSentinel) {
          local = NetworkModule_ProvideItemsApiFactory.provideItemsApi(networkModule, retrofit());
          itemsApi = DoubleCheck.reentrantCheck(itemsApi, local);
        }
      }
    }
    return (ItemsApi) local;
  }

  private BannersRepositoryImpl bannersRepositoryImpl() {
    Object local = bannersRepositoryImpl;
    if (local instanceof MemoizedSentinel) {
      synchronized (local) {
        local = bannersRepositoryImpl;
        if (local instanceof MemoizedSentinel) {
          local = new BannersRepositoryImpl(itemsApi());
          bannersRepositoryImpl = DoubleCheck.reentrantCheck(bannersRepositoryImpl, local);
        }
      }
    }
    return (BannersRepositoryImpl) local;
  }

  private BannersRepository bannersRepository() {
    Object local = bannersRepository;
    if (local instanceof MemoizedSentinel) {
      synchronized (local) {
        local = bannersRepository;
        if (local instanceof MemoizedSentinel) {
          local = RepositoryModule_ProviderBannersRepositoryFactory.providerBannersRepository(repositoryModule, bannersRepositoryImpl());
          bannersRepository = DoubleCheck.reentrantCheck(bannersRepository, local);
        }
      }
    }
    return (BannersRepository) local;
  }

  private CatalogRepositoryImpl catalogRepositoryImpl() {
    Object local = catalogRepositoryImpl;
    if (local instanceof MemoizedSentinel) {
      synchronized (local) {
        local = catalogRepositoryImpl;
        if (local instanceof MemoizedSentinel) {
          local = new CatalogRepositoryImpl(itemsApi());
          catalogRepositoryImpl = DoubleCheck.reentrantCheck(catalogRepositoryImpl, local);
        }
      }
    }
    return (CatalogRepositoryImpl) local;
  }

  private CatalogRepository catalogRepository() {
    Object local = catalogRepository;
    if (local instanceof MemoizedSentinel) {
      synchronized (local) {
        local = catalogRepository;
        if (local instanceof MemoizedSentinel) {
          local = RepositoryModule_ProviderCatalogRepositoryFactory.providerCatalogRepository(repositoryModule, catalogRepositoryImpl());
          catalogRepository = DoubleCheck.reentrantCheck(catalogRepository, local);
        }
      }
    }
    return (CatalogRepository) local;
  }

  @Override
  public void injectMainApplication(MainApplication mainApplication) {
  }

  @Override
  public ActivityRetainedComponentBuilder retainedComponentBuilder() {
    return new ActivityRetainedCBuilder();
  }

  @Override
  public ServiceComponentBuilder serviceComponentBuilder() {
    return new ServiceCBuilder();
  }

  public static final class Builder {
    private ApplicationContextModule applicationContextModule;

    private LocalModule localModule;

    private NetworkModule networkModule;

    private RepositoryModule repositoryModule;

    private Builder() {
    }

    public Builder applicationContextModule(ApplicationContextModule applicationContextModule) {
      this.applicationContextModule = Preconditions.checkNotNull(applicationContextModule);
      return this;
    }

    public Builder localModule(LocalModule localModule) {
      this.localModule = Preconditions.checkNotNull(localModule);
      return this;
    }

    public Builder networkModule(NetworkModule networkModule) {
      this.networkModule = Preconditions.checkNotNull(networkModule);
      return this;
    }

    public Builder repositoryModule(RepositoryModule repositoryModule) {
      this.repositoryModule = Preconditions.checkNotNull(repositoryModule);
      return this;
    }

    public MainApplication_HiltComponents.SingletonC build() {
      Preconditions.checkBuilderRequirement(applicationContextModule, ApplicationContextModule.class);
      if (localModule == null) {
        this.localModule = new LocalModule();
      }
      if (networkModule == null) {
        this.networkModule = new NetworkModule();
      }
      if (repositoryModule == null) {
        this.repositoryModule = new RepositoryModule();
      }
      return new DaggerMainApplication_HiltComponents_SingletonC(applicationContextModule, localModule, networkModule, repositoryModule);
    }
  }

  private final class ActivityRetainedCBuilder implements MainApplication_HiltComponents.ActivityRetainedC.Builder {
    @Override
    public MainApplication_HiltComponents.ActivityRetainedC build() {
      return new ActivityRetainedCImpl();
    }
  }

  private final class ActivityRetainedCImpl extends MainApplication_HiltComponents.ActivityRetainedC {
    private volatile Object lifecycle = new MemoizedSentinel();

    private ActivityRetainedCImpl() {

    }

    private Object lifecycle() {
      Object local = lifecycle;
      if (local instanceof MemoizedSentinel) {
        synchronized (local) {
          local = lifecycle;
          if (local instanceof MemoizedSentinel) {
            local = ActivityRetainedComponentManager_Lifecycle_Factory.newInstance();
            lifecycle = DoubleCheck.reentrantCheck(lifecycle, local);
          }
        }
      }
      return (Object) local;
    }

    @Override
    public ActivityComponentBuilder activityComponentBuilder() {
      return new ActivityCBuilder();
    }

    @Override
    public ActivityRetainedLifecycle getActivityRetainedLifecycle() {
      return (ActivityRetainedLifecycle) lifecycle();
    }

    private final class ActivityCBuilder implements MainApplication_HiltComponents.ActivityC.Builder {
      private Activity activity;

      @Override
      public ActivityCBuilder activity(Activity activity) {
        this.activity = Preconditions.checkNotNull(activity);
        return this;
      }

      @Override
      public MainApplication_HiltComponents.ActivityC build() {
        Preconditions.checkBuilderRequirement(activity, Activity.class);
        return new ActivityCImpl(activity);
      }
    }

    private final class ActivityCImpl extends MainApplication_HiltComponents.ActivityC {
      private ActivityCImpl(Activity activity) {

      }

      @Override
      public void injectMainActivity(MainActivity arg0) {
        injectMainActivity2(arg0);
      }

      @Override
      public void injectSplashActivity(SplashActivity arg0) {
        injectSplashActivity2(arg0);
      }

      @Override
      public DefaultViewModelFactories.InternalFactoryFactory getHiltInternalFactoryFactory() {
        return DefaultViewModelFactories_InternalFactoryFactory_Factory.newInstance(ApplicationContextModule_ProvideApplicationFactory.provideApplication(DaggerMainApplication_HiltComponents_SingletonC.this.applicationContextModule), getViewModelKeys(), new ViewModelCBuilder());
      }

      @Override
      public Set<String> getViewModelKeys() {
        return Collections.<String>singleton(HomeViewModel_HiltModules_KeyModule_ProvideFactory.provide());
      }

      @Override
      public ViewModelComponentBuilder getViewModelComponentBuilder() {
        return new ViewModelCBuilder();
      }

      @Override
      public FragmentComponentBuilder fragmentComponentBuilder() {
        return new FragmentCBuilder();
      }

      @Override
      public ViewComponentBuilder viewComponentBuilder() {
        return new ViewCBuilder();
      }

      private MainActivity injectMainActivity2(MainActivity instance) {
        MainActivity_MembersInjector.injectPrefHelper(instance, DaggerMainApplication_HiltComponents_SingletonC.this.appPrefs());
        return instance;
      }

      private SplashActivity injectSplashActivity2(SplashActivity instance) {
        SplashActivity_MembersInjector.injectPrefHelper(instance, DaggerMainApplication_HiltComponents_SingletonC.this.appPrefs());
        return instance;
      }

      private final class FragmentCBuilder implements MainApplication_HiltComponents.FragmentC.Builder {
        private Fragment fragment;

        @Override
        public FragmentCBuilder fragment(Fragment fragment) {
          this.fragment = Preconditions.checkNotNull(fragment);
          return this;
        }

        @Override
        public MainApplication_HiltComponents.FragmentC build() {
          Preconditions.checkBuilderRequirement(fragment, Fragment.class);
          return new FragmentCI(fragment);
        }
      }

      private final class FragmentCI extends MainApplication_HiltComponents.FragmentC {
        private FragmentCI(Fragment fragment) {

        }

        @Override
        public void injectHomeFragment(HomeFragment arg0) {
        }

        @Override
        public DefaultViewModelFactories.InternalFactoryFactory getHiltInternalFactoryFactory() {
          return ActivityCImpl.this.getHiltInternalFactoryFactory();
        }

        @Override
        public ViewWithFragmentComponentBuilder viewWithFragmentComponentBuilder() {
          return new ViewWithFragmentCBuilder();
        }

        private final class ViewWithFragmentCBuilder implements MainApplication_HiltComponents.ViewWithFragmentC.Builder {
          private View view;

          @Override
          public ViewWithFragmentCBuilder view(View view) {
            this.view = Preconditions.checkNotNull(view);
            return this;
          }

          @Override
          public MainApplication_HiltComponents.ViewWithFragmentC build() {
            Preconditions.checkBuilderRequirement(view, View.class);
            return new ViewWithFragmentCI(view);
          }
        }

        private final class ViewWithFragmentCI extends MainApplication_HiltComponents.ViewWithFragmentC {
          private ViewWithFragmentCI(View view) {

          }
        }
      }

      private final class ViewCBuilder implements MainApplication_HiltComponents.ViewC.Builder {
        private View view;

        @Override
        public ViewCBuilder view(View view) {
          this.view = Preconditions.checkNotNull(view);
          return this;
        }

        @Override
        public MainApplication_HiltComponents.ViewC build() {
          Preconditions.checkBuilderRequirement(view, View.class);
          return new ViewCI(view);
        }
      }

      private final class ViewCI extends MainApplication_HiltComponents.ViewC {
        private ViewCI(View view) {

        }
      }
    }

    private final class ViewModelCBuilder implements MainApplication_HiltComponents.ViewModelC.Builder {
      private SavedStateHandle savedStateHandle;

      @Override
      public ViewModelCBuilder savedStateHandle(SavedStateHandle handle) {
        this.savedStateHandle = Preconditions.checkNotNull(handle);
        return this;
      }

      @Override
      public MainApplication_HiltComponents.ViewModelC build() {
        Preconditions.checkBuilderRequirement(savedStateHandle, SavedStateHandle.class);
        return new ViewModelCImpl(savedStateHandle);
      }
    }

    private final class ViewModelCImpl extends MainApplication_HiltComponents.ViewModelC {
      private volatile Provider<HomeViewModel> homeViewModelProvider;

      private ViewModelCImpl(SavedStateHandle savedStateHandle) {

      }

      private GetBannersUseCase getBannersUseCase() {
        return new GetBannersUseCase(DaggerMainApplication_HiltComponents_SingletonC.this.bannersRepository());
      }

      private GetCatalogUseCase getCatalogUseCase() {
        return new GetCatalogUseCase(DaggerMainApplication_HiltComponents_SingletonC.this.catalogRepository());
      }

      private HomeViewModel homeViewModel() {
        return new HomeViewModel(getBannersUseCase(), getCatalogUseCase());
      }

      private Provider<HomeViewModel> homeViewModelProvider() {
        Object local = homeViewModelProvider;
        if (local == null) {
          local = new SwitchingProvider<>(0);
          homeViewModelProvider = (Provider<HomeViewModel>) local;
        }
        return (Provider<HomeViewModel>) local;
      }

      @Override
      public Map<String, Provider<ViewModel>> getHiltViewModelMap() {
        return Collections.<String, Provider<ViewModel>>singletonMap("com.omar_aly.sary.ui.home.HomeViewModel", (Provider) homeViewModelProvider());
      }

      private final class SwitchingProvider<T> implements Provider<T> {
        private final int id;

        SwitchingProvider(int id) {
          this.id = id;
        }

        @SuppressWarnings("unchecked")
        @Override
        public T get() {
          switch (id) {
            case 0: // com.omar_aly.sary.ui.home.HomeViewModel 
            return (T) ViewModelCImpl.this.homeViewModel();

            default: throw new AssertionError(id);
          }
        }
      }
    }
  }

  private final class ServiceCBuilder implements MainApplication_HiltComponents.ServiceC.Builder {
    private Service service;

    @Override
    public ServiceCBuilder service(Service service) {
      this.service = Preconditions.checkNotNull(service);
      return this;
    }

    @Override
    public MainApplication_HiltComponents.ServiceC build() {
      Preconditions.checkBuilderRequirement(service, Service.class);
      return new ServiceCImpl(service);
    }
  }

  private final class ServiceCImpl extends MainApplication_HiltComponents.ServiceC {
    private ServiceCImpl(Service service) {

    }
  }
}
