// Generated by Dagger (https://dagger.dev).
package com.omar_aly.data.di;

import com.omar_aly.data.CatalogRepositoryImpl;
import com.omar_aly.domain.repository.CatalogRepository;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class RepositoryModule_ProviderCatalogRepositoryFactory implements Factory<CatalogRepository> {
  private final RepositoryModule module;

  private final Provider<CatalogRepositoryImpl> repositoryProvider;

  public RepositoryModule_ProviderCatalogRepositoryFactory(RepositoryModule module,
      Provider<CatalogRepositoryImpl> repositoryProvider) {
    this.module = module;
    this.repositoryProvider = repositoryProvider;
  }

  @Override
  public CatalogRepository get() {
    return providerCatalogRepository(module, repositoryProvider.get());
  }

  public static RepositoryModule_ProviderCatalogRepositoryFactory create(RepositoryModule module,
      Provider<CatalogRepositoryImpl> repositoryProvider) {
    return new RepositoryModule_ProviderCatalogRepositoryFactory(module, repositoryProvider);
  }

  public static CatalogRepository providerCatalogRepository(RepositoryModule instance,
      CatalogRepositoryImpl repository) {
    return Preconditions.checkNotNullFromProvides(instance.providerCatalogRepository(repository));
  }
}
